#!/bin/sh
set -e

compose_includes() {
    local include_files="<%= assets.include_files %>"
    if [ -z "$include_files" ]; then
        return
    fi

    local includes
    includes=$(echo "<%= assets.include_files %>" | tr ' ' '\n' | sed 's/^/--file /' | tr '\n' ' ')
    printf "%s" "${includes}"
}

fetch_diff_stack() {
  cd "<%= assets.git_dir %>"
  git fetch origin "<%= stack.git_reference %>"
  git diff --quiet FETCH_HEAD && exit 254
  cd -
}

has_changed_stack() {
  cd "<%= assets.git_dir %>"

  local has_changes="false"
  for file in $(git diff --name-only origin); do
      if [ "$file" = "<%= stack.compose_file %>" ]; then
              has_changes="true"
              break
      fi

      local include_files="<%= assets.include_files %>"
      if [ -z "$include_files" ]; then
        continue
      fi

      OIFS=$IFS
      IFS=' '
      for include in $include_files; do
        if [ "$file" = "$include" ]; then
            has_changes="true"
            break
        fi
      done
      IFS=$OIFS
  done

  if [ "$has_changes" = "false" ]; then
    exit 254
  fi

  cd -
}

stop_remove_stack() {
  if [ ! -d "<%= assets.git_dir %>" ]; then
    return
  fi

  cd "<%= assets.git_dir %>"

  local files
  files=$(compose_includes)

  sudo docker --log-level error \
    compose --progress plain \
    --file "<%= stack.compose_file %>" $files \
    --env-file "<%= assets.env_file %>" \
    down || true

  cd -
}

create_start_stack() {
  cd "<%= assets.git_dir %>"

  git merge FETCH_HEAD

  local files
  files=$(compose_includes)

  sudo docker --log-level error \
    compose --progress plain \
    --file "<%= stack.compose_file %>" $files \
    --env-file "<%= assets.env_file %>" \
    up --detach

  cd -
}

fetch_diff_stack
has_changed_stack
stop_remove_stack
create_start_stack

# vim: set ft=sh :
